server:
  port: 8080

resilience4j:
  retry:
    instances:
      kafkaSend:
        max-attempts: 3
        wait-duration: 200ms
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - org.apache.kafka.common.errors.TimeoutException
          - org.apache.kafka.common.errors.RetriableException
  circuitbreaker:
    instances:
      kafkaSend:
        sliding-window-type: count_based
        sliding-window-size: 20
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true

spring:
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9094} # 기본값은 로컬 외부포트
    consumer:
      group-id: user-service
    admin:
      fail-fast: true
  datasource:
    username: ${RDB_USERNAME}
    url: ${RDB_URL}
    password: ${RDB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  data:
    redis:
      #host: ${SPRING_DATA_REDIS_HOST:localhost}
      #port: ${SPRING_DATA_REDIS_PORT:6379}
      host: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6379}

  jpa:
    hibernate:
      ddl-auto: update
    database: mysql
    database-platform: org.hibernate.dialect.MySQL8Dialect
    open-in-view: false

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${SMTP_USERNAME}
    password: ${SMTP_PASSWORD}
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
      mail.smtp.timeout: 5000

jwt-properties:
  key: ${JWT_KEY:KItFWMZokpiSj6ABi42XJpNWbBqUJ4UT3mhLrXk//IjI2TgQy2Bk+2KrCk4cQDl8oFsSYH9Gr++Lqr2w6CYJnQ==}
  access-token-subject: AccessToken
  token-header: Authorization
  bearer: Bearer
  id: id

logging:
  level:
    com.project.user.global.security.TokenProvider: DEBUG
    root: INFO
    org.springframework: DEBUG
    org.springframework.web: DEBUG
    org.springframework.boot: DEBUG
    com.project.user: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    groups-order: DESC
    tags-sorter: alpha
    operations-sorter: method
    enabled: true
  paths-to-match:
    - /api/**

management:
  endpoints:
    web:
      exposure:
        include: health,info,liveness,readiness,prometheus
  endpoint:
    health:
      show-details: always
    liveness:
      enabled: true
    readiness:
      enabled: true
  metrics:
    tags:
      application: user-service
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99