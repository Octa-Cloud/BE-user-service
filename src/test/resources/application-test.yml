server:
  port: 8080

spring:
  profiles:
    active: test
  
  datasource:
    username: ${RDB_USERNAME:sa}
    url: ${RDB_URL:jdbc:h2:mem:testdb;MODE=MySQL;DATABASE_TO_LOWER=TRUE;DEFAULT_NULL_ORDERING=HIGH}
    password: ${RDB_PASSWORD:}
    driver-class-name: ${RDB_DRIVER:org.h2.Driver}
    hikari:
      maximum-pool-size: 5
      minimum-idle: 1
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000

  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:6379}

  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:create-drop}
    database: ${JPA_DATABASE:h2}
    database-platform: ${JPA_DATABASE_PLATFORM:org.hibernate.dialect.H2Dialect}
    show-sql: true
    open-in-view: false
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true

  mail:
    host: ${SMTP_HOST:smtp.gmail.com}
    port: ${SMTP_PORT:587}
    username: ${SMTP_USERNAME:test@example.com}
    password: ${SMTP_PASSWORD:testpassword}
    properties:
      mail.smtp.auth: ${SMTP_AUTH:false}
      mail.smtp.starttls.enable: ${SMTP_STARTTLS:false}
      mail.smtp.timeout: 5000

  # 테스트에서는 일부 외부 의존성 비활성화 (환경변수로 제어)
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration
      - org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration
      - org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration
      - org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration
      - org.springframework.boot.autoconfigure.data.mongo.MongoAutoConfiguration
      - org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration
      - org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration

# JWT 설정 (메인과 동일한 구조)
jwt-properties:
  key: ${JWT_KEY:test-secret-key-for-testing-only-very-long-key-123456789}
  access-token-expiration-period-day: ${JWT_ACCESS_EXPIRATION:1}
  access-token-subject: AccessToken
  refresh-token-expiration-period-day: ${JWT_REFRESH_EXPIRATION:30}
  refresh-token-subject: RefreshToken
  token-header: Authorization
  bearer: Bearer
  id: id

# 로깅 설정
logging:
  level:
    com.project.user: DEBUG
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# 테스트용 설정
test:
  admin:
    email: admin@test.com
    password: admin123
  user:
    email: user@test.com
    password: user123
