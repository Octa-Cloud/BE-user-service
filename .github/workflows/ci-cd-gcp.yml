name: User Service CI/CD (GCP)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# 동일 브랜치에서 중복 실행 막기 (선택)
concurrency:
  group: usersvc-${{ github.ref }}
  cancel-in-progress: true

env:
  REGION: asia-northeast3
  REPO: microservices
  IMAGE: user-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      pull-requests: write
      # (패키지/릴리스가 필요하면 packages: write 등 추가)
    steps:
      - uses: actions/checkout@v4
        with:
          # git remote에 기본 토큰 주입을 막아 push 시 우리가 지정한 토큰만 쓰도록
          persist-credentials: false

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build
        run: ./gradlew build -x test

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker auth for Artifact Registry
        run: gcloud auth configure-docker ${REGION}-docker.pkg.dev --quiet

      - name: Build and push image
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          set -euo pipefail
          TAG=${{ github.sha }}
          IMAGE_URI=${REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${REPO}/${IMAGE}
          docker build -t ${IMAGE_URI}:${TAG} -t ${IMAGE_URI}:latest .
          docker push ${IMAGE_URI}:${TAG}
          docker push ${IMAGE_URI}:latest
          echo "IMAGE_URI=${IMAGE_URI}:${TAG}" >> $GITHUB_ENV

      - name: Authenticate GitHub CLI
        if: github.ref == 'refs/heads/main'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          set -euo pipefail
          echo "${GH_TOKEN}" | gh auth login --with-token
          gh auth status

      # (옵션1) infra 배포 워크플로 직접 트리거로 즉시 배포
      - name: Trigger infra deploy with IMAGE_URI
        if: github.ref == 'refs/heads/main'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          INFRA_REPO: ${{ secrets.INFRA_REPO }}   # e.g. org/infra-repo
          IMAGE_URI: ${{ env.IMAGE_URI }}
        run: |
          set -euo pipefail
          echo "Triggering infra deploy with IMAGE_URI=${IMAGE_URI}"
          if gh workflow run gcp-deploy.yml -R ${INFRA_REPO} --ref main -f IMAGE_URI="${IMAGE_URI}"; then
            echo "DISPATCH_OK=1" >> $GITHUB_ENV
          else
            echo "DISPATCH_OK=0" >> $GITHUB_ENV
          fi

      # (옵션2) 디스패치 실패 시 PR 방식으로 이미지 태그 업데이트
      - name: Fallback - Open PR to infra repo with new image tag
        if: github.ref == 'refs/heads/main' && env.DISPATCH_OK == '0'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          INFRA_REPO: ${{ secrets.INFRA_REPO }}
          REGION: ${{ env.REGION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          REPO: ${{ env.REPO }}
          IMAGE: ${{ env.IMAGE }}
        run: |
          set -euo pipefail
          git config --global user.email "action@github.com"
          git config --global user.name "github-actions"

          rm -rf infra
          git clone https://x-access-token:${GH_TOKEN}@github.com/${INFRA_REPO}.git infra
          cd infra

          BR=update-user-${GITHUB_SHA}
          git checkout -b ${BR}

          TARGET="infrastructure/k8s-gcp/user-service/deployment-gcp.yaml"
          if [ -f "${TARGET}" ]; then
            sed -i "s|image: .*${IMAGE}:.*|image: ${REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${REPO}/${IMAGE}:${GITHUB_SHA}|g" "${TARGET}"
            git add "${TARGET}"
          else
            echo "::warning::${TARGET} 파일을 찾을 수 없어 변경을 건너뜁니다."
          fi

          if git diff --cached --quiet; then
            echo "No changes to commit. Skipping PR."
            exit 0
          fi

          git commit -m "chore: user-service image ${GITHUB_SHA}"
          git push -u origin ${BR}

          echo "${GH_TOKEN}" | gh auth login --with-token
          if gh pr list --repo "${INFRA_REPO}" --head "${BR}" --json number --jq 'length' | grep -q '^0$'; then
            gh pr create \
              --repo "${INFRA_REPO}" \
              --title "chore: user-service image ${GITHUB_SHA}" \
              --body "Update image to ${GITHUB_SHA}" \
              --head "${BR}"
          else
            echo "PR already exists for branch ${BR}. Skipping create."
          fi
