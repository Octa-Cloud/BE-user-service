#name: User Service CI/CD
#
#on:
#  push:
#    branches: [ main, develop ]
#  pull_request:
#    branches: [ main ]
#
#env:
#  AWS_REGION: ap-northeast-2
#  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
#  ECR_REPOSITORY: microservices-user-service
#  EKS_CLUSTER_NAME: microservices-cluster
#  SERVICE_NAME: user-service
#
#jobs:
#  test:
#    runs-on: ubuntu-latest
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Set up JDK 17
#      uses: actions/setup-java@v4
#      with:
#        java-version: '17'
#        distribution: 'temurin'
#
#    - name: Cache Gradle packages
#      uses: actions/cache@v3
#      with:
#        path: |
#          ~/.gradle/caches
#          ~/.gradle/wrapper
#        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#        restore-keys: |
#          ${{ runner.os }}-gradle-
#
#    - name: Build application
#      run: ./gradlew build -x test
#
#    - name: Run tests
#      run: ./gradlew test
#
#    - name: Upload test results
#      uses: actions/upload-artifact@v3
#      if: always()
#      with:
#        name: test-results
#        path: build/test-results/
#
#  build-and-push:
#    needs: test
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main'
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v4
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: ${{ env.AWS_REGION }}
#
#    - name: Login to Amazon ECR
#      id: login-ecr
#      uses: aws-actions/amazon-ecr-login@v2
#
#    - name: Build, tag, and push image to Amazon ECR
#      env:
#        IMAGE_TAG: ${{ github.sha }}
#      run: |
#        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
#        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
#
#  deploy:
#    needs: build-and-push
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main'
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v4
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: ${{ env.AWS_REGION }}
#
#    - name: Install kubectl
#      uses: azure/setup-kubectl@v3
#      with:
#        version: 'v1.28.0'
#
#    - name: Update kubeconfig
#      run: |
#        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
#
#    - name: Update image tag in deployment
#      run: |
#        # Clone the infrastructure repository
#        git clone https://github.com/${{ secrets.INFRA_REPO }}.git infra-repo
#        cd infra-repo
#
#        # Update image tag
#        sed -i "s|image: $ECR_REGISTRY/$ECR_REPOSITORY:.*|image: $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}|g" k8s/user-service/deployment.yaml
#
#        # Commit and push changes
#        git config --local user.email "action@github.com"
#        git config --local user.name "GitHub Action"
#        git add k8s/user-service/deployment.yaml
#        git commit -m "Update user-service image to ${{ github.sha }}" || exit 0
#        git push
#
#    - name: Deploy to Kubernetes
#      run: |
#        # Clone the infrastructure repository
#        git clone https://github.com/${{ secrets.INFRA_REPO }}.git infra-repo
#        cd infra-repo
#
#        # Deploy user-service
#        kubectl apply -f k8s/user-service/ -n microservices
#
#    - name: Wait for deployment
#      run: |
#        kubectl wait --for=condition=available --timeout=300s deployment/${{ env.SERVICE_NAME }} -n microservices
#
#    - name: Get service URL
#      run: |
#        echo "User Service deployed successfully!"
#        echo "Service URL:"
#        kubectl get service ${{ env.SERVICE_NAME }} -n microservices
